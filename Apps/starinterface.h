#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CStarinterface wrapper class

class CStarinterface : public CWnd
{
protected:
	DECLARE_DYNCREATE(CStarinterface)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xBAF60A5D, 0xDB16, 0x459D, { 0x97, 0x34, 0xBA, 0xB5, 0xC8, 0x41, 0xED, 0x37 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DStarInterface

// Functions
//

	BOOL CommPortOpen(LPCTSTR CommPort, short BaudRate)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 ;
		InvokeHelper(0x12, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, CommPort, BaudRate);
		return result;
	}
	BOOL CommPortClose()
	{
		BOOL result;
		InvokeHelper(0x13, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SocketInitialize()
	{
		BOOL result;
		InvokeHelper(0x14, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SocketConnect(LPCTSTR ServerIP, short ServerPort)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR VTS_I2 ;
		InvokeHelper(0x15, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ServerIP, ServerPort);
		return result;
	}
	BOOL SocketClose()
	{
		BOOL result;
		InvokeHelper(0x16, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SocketReset()
	{
		BOOL result;
		InvokeHelper(0x17, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	CString CardIDDownload(LPCTSTR CardID, LPCTSTR Password, LPCTSTR TimeSchedule, LPCTSTR Reader, LPCTSTR Finger)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x18, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, CardID, Password, TimeSchedule, Reader, Finger);
		return result;
	}
	CString CardIDRead(LPCTSTR CardID)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x19, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, CardID);
		return result;
	}
	CString CardIDCount(LPCTSTR Flag)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1a, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Flag);
		return result;
	}
	CString TimeScheduleDownload(LPCTSTR TimeScheduleCode, LPCTSTR TimeSchedule, LPCTSTR HolidayCode)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x1b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, TimeScheduleCode, TimeSchedule, HolidayCode);
		return result;
	}
	CString TimeScheduleUpload(LPCTSTR TimeScheduleCode)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, TimeScheduleCode);
		return result;
	}
	CString HolidayDownload(LPCTSTR HolidayCode, LPCTSTR Holiday)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x1d, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, HolidayCode, Holiday);
		return result;
	}
	CString HolidayUpload(LPCTSTR HolidayCode)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x1e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, HolidayCode);
		return result;
	}
	CString FingerDataDownload(LPCTSTR CardID, LPCTSTR MasterFlag, LPCTSTR FingerData)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x1f, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, CardID, MasterFlag, FingerData);
		return result;
	}
	CString FingerDataUpload(LPCTSTR CardID)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x20, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, CardID);
		return result;
	}
	CString FingerBatchUpload(short WorkIndex)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x21, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, WorkIndex);
		return result;
	}
	CString MasterCardDownload(LPCTSTR MasterCard, LPCTSTR MasterPassword, LPCTSTR ModeFlag)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x22, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, MasterCard, MasterPassword, ModeFlag);
		return result;
	}
	CString MasterCardUpload()
	{
		CString result;
		InvokeHelper(0x23, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString CardIDMemoryDownload(LPCTSTR MemoryCount)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x24, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, MemoryCount);
		return result;
	}
	CString ModeChangeDownload(LPCTSTR Mode, LPCTSTR TimeScheduleCode)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x25, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Mode, TimeScheduleCode);
		return result;
	}
	CString ModeUpload()
	{
		CString result;
		InvokeHelper(0x26, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString OutputPortDownload(LPCTSTR OutputNo, LPCTSTR Status, LPCTSTR OperationTime)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x27, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, OutputNo, Status, OperationTime);
		return result;
	}
	CString InOutputTableDownload(LPCTSTR InputNo, LPCTSTR TimeScheduleCode, LPCTSTR Output1, LPCTSTR Output2, LPCTSTR Output3, LPCTSTR Output4, LPCTSTR Output5)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x28, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, InputNo, TimeScheduleCode, Output1, Output2, Output3, Output4, Output5);
		return result;
	}
	CString AntiPassbackDownload(LPCTSTR Status)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x29, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Status);
		return result;
	}
	CString AntiPassbackUpload()
	{
		CString result;
		InvokeHelper(0x2a, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString DuressModeDownload(LPCTSTR DuressModeKey, LPCTSTR UseFlag)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x2b, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, DuressModeKey, UseFlag);
		return result;
	}
	CString CommSpeedDownload(long BPS)
	{
		CString result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x2c, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, BPS);
		return result;
	}
	CString CommSpeedUpload()
	{
		CString result;
		InvokeHelper(0x2d, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString KeypadUseDownload(LPCTSTR UseFlag)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x2e, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, UseFlag);
		return result;
	}
	CString KeypadUseUpload()
	{
		CString result;
		InvokeHelper(0x2f, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString FunctionKeyChange(LPCTSTR FunctionKey)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x30, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, FunctionKey);
		return result;
	}
	CString DateTimeDownload(LPCTSTR Date, LPCTSTR Week, LPCTSTR Time)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x31, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, Date, Week, Time);
		return result;
	}
	CString DateTimeUpload()
	{
		CString result;
		InvokeHelper(0x32, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	CString SystemInitialize(LPCTSTR WorkIndex)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x33, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, WorkIndex);
		return result;
	}
	BOOL PollingStart(short StartBoard, short EndBoard)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x34, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, StartBoard, EndBoard);
		return result;
	}
	BOOL PollingStop()
	{
		BOOL result;
		InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL BatchStart()
	{
		BOOL result;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL BatchStop()
	{
		BOOL result;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	CString CardIDDelete(LPCTSTR CardID)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, CardID);
		return result;
	}
	CString GlobalAntiPassbackDownload(LPCTSTR CardID, LPCTSTR UseFlag)
	{
		CString result;
		static BYTE parms[] = VTS_BSTR VTS_BSTR ;
		InvokeHelper(0x39, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, CardID, UseFlag);
		return result;
	}
	CString SerialNoUpload()
	{
		CString result;
		InvokeHelper(0x3a, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void AboutBox()
	{
		InvokeHelper(DISPID_ABOUTBOX, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}

// Properties
//

short GetWorkIndex()
{
	short result;
	GetProperty(0x1, VT_I2, (void*)&result);
	return result;
}
void SetWorkIndex(short propVal)
{
	SetProperty(0x1, VT_I2, propVal);
}
CString GetBoardIndex()
{
	CString result;
	GetProperty(0x2, VT_BSTR, (void*)&result);
	return result;
}
void SetBoardIndex(CString propVal)
{
	SetProperty(0x2, VT_BSTR, propVal);
}
CString GetControllerDate()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}
void SetControllerDate(CString propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}
CString GetControllerTime()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}
void SetControllerTime(CString propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}
CString GetControllerWeek()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}
void SetControllerWeek(CString propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}
CString GetFinger()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}
void SetFinger(CString propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}
CString GetFingerUseFlag()
{
	CString result;
	GetProperty(0x7, VT_BSTR, (void*)&result);
	return result;
}
void SetFingerUseFlag(CString propVal)
{
	SetProperty(0x7, VT_BSTR, propVal);
}
CString GetHoliday()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}
void SetHoliday(CString propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}
CString GetHolidayCode()
{
	CString result;
	GetProperty(0x9, VT_BSTR, (void*)&result);
	return result;
}
void SetHolidayCode(CString propVal)
{
	SetProperty(0x9, VT_BSTR, propVal);
}
CString GetMasterCard()
{
	CString result;
	GetProperty(0xa, VT_BSTR, (void*)&result);
	return result;
}
void SetMasterCard(CString propVal)
{
	SetProperty(0xa, VT_BSTR, propVal);
}
CString GetMasterFlag()
{
	CString result;
	GetProperty(0xb, VT_BSTR, (void*)&result);
	return result;
}
void SetMasterFlag(CString propVal)
{
	SetProperty(0xb, VT_BSTR, propVal);
}
CString GetMasterPassword()
{
	CString result;
	GetProperty(0xc, VT_BSTR, (void*)&result);
	return result;
}
void SetMasterPassword(CString propVal)
{
	SetProperty(0xc, VT_BSTR, propVal);
}
CString GetPassword()
{
	CString result;
	GetProperty(0xd, VT_BSTR, (void*)&result);
	return result;
}
void SetPassword(CString propVal)
{
	SetProperty(0xd, VT_BSTR, propVal);
}
CString GetReader()
{
	CString result;
	GetProperty(0xe, VT_BSTR, (void*)&result);
	return result;
}
void SetReader(CString propVal)
{
	SetProperty(0xe, VT_BSTR, propVal);
}
CString GetTimeSchedule()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}
void SetTimeSchedule(CString propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}
CString GetTimeScheduleCode()
{
	CString result;
	GetProperty(0x10, VT_BSTR, (void*)&result);
	return result;
}
void SetTimeScheduleCode(CString propVal)
{
	SetProperty(0x10, VT_BSTR, propVal);
}
CString GetCardID()
{
	CString result;
	GetProperty(0x11, VT_BSTR, (void*)&result);
	return result;
}
void SetCardID(CString propVal)
{
	SetProperty(0x11, VT_BSTR, propVal);
}


};
